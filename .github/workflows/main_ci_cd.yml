name: Azure CI/CD - Terraform to AKS

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Required permissions for OIDC to work
permissions:
  id-token: write     # Required for OIDC authentication
  contents: read      # Required to checkout repo
  actions: read       # Recommended for workflow access

env:
  TF_WORKING_DIR: 'terraform'
  ACR_NAME_OUTPUT: 'acr_login_server'
  AKS_NAME_OUTPUT: 'aks_cluster_name'
  RG_NAME_OUTPUT: 'resource_group_name'
  BACKEND_IMAGE_NAME: 'counselor-backend'
  BACKEND_APP_PATH: 'backend'
  K8S_MANIFESTS_PATH: 'k8s'
  PROJECT_PREFIX: 'counselorapp'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout Code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2️⃣ Azure Login using OIDC (no secrets.json needed)
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 3️⃣ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # 4️⃣ Terraform Init + Apply
      - name: Provision Azure Infrastructure
        id: tf_apply
        run: |
          terraform init -backend=false
          terraform apply -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      # 5️⃣ Extract Terraform Outputs
      - name: Extract Terraform Outputs
        id: tf_output
        run: |
          echo "ACR_LOGIN_SERVER=$(terraform output -raw ${{ env.ACR_NAME_OUTPUT }})" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=$(terraform output -raw ${{ env.RG_NAME_OUTPUT }})" >> $GITHUB_ENV
          echo "AKS_CLUSTER=$(terraform output -raw ${{ env.AKS_NAME_OUTPUT }})" >> $GITHUB_ENV
        working-directory: ${{ env.TF_WORKING_DIR }}

      # 6️⃣ Login to Azure Container Registry via OIDC (NO USERNAME/PASSWORD)
      - name: Docker Login to ACR (OIDC)
        run: |
          az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      # 7️⃣ Build & Push Docker Image
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG ${{ env.BACKEND_APP_PATH }}
          docker push $IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 8️⃣ Set AKS Context using OIDC Identity
      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          cluster-name: ${{ env.AKS_CLUSTER }}
          resource-group: ${{ env.RESOURCE_GROUP }}

      # 9️⃣ Deploy to AKS using Kubernetes manifests
      - name: Deploy to AKS
        uses: azure/k8s-deploy@v5
        with:
          manifests: |
            ${{ env.K8S_MANIFESTS_PATH }}/deployment.yaml
            ${{ env.K8S_MANIFESTS_PATH }}/service.yaml
          images: |
            ${{ env.IMAGE_TAG }}
          namespace: default
